package main

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os"

	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/logger"
	"github.com/spf13/viper"
)

type AutoGenerated struct {
	Key    string `json:"key"`
	Fields struct {
		Issuetype struct {
			Name string `json:"name"`
		} `json:"issuetype"`
		Assignee struct {
			DisplayName string `json:"displayName"`
		} `json:"assignee"`
		Updated string `json:"updated"`
		Status  struct {
			Name string `json:"name"`
		} `json:"status"`
		Summary           string  `json:"summary"`
		Customfield_10105 float32 `json:"customfield_10105"`
		Creator           struct {
			DisplayName string `json:"displayName"`
		} `json:"creator"`
		Subtasks []struct {
			Key    string `json:"key"`
			Fields struct {
				Summary string `json:"summary"`
				Status  struct {
					Name string `json:"name"`
				} `json:"status"`
			} `json:"fields"`
		} `json:"subtasks"`
		Parent struct {
			Key    string `json:"key"`
			Fields struct {
				Summary string `json:"summary"`
				Status  struct {
					Name string `json:"name"`
				} `json:"status"`
			} `json:"fields"`
		} `json:"parent"`
		Reporter struct {
			DisplayName string `json:"displayName"`
		} `json:"reporter"`
		Comment struct {
			Total int `json:"total"`
		} `json:"comment"`
		Worklog struct {
			Worklogs []struct {
				TimeSpent string `json:"timeSpent"`
			} `json:"worklogs"`
		} `json:"worklog"`
	} `json:"fields"`
}

func getStoryData(c *fiber.Ctx) error {
	story := c.Params("storyNum")

	vi := viper.New()
	vi.SetConfigFile("config/local.yaml")
	vi.ReadInConfig()

	resp, err := http.Get("https://" + vi.GetString("Username") + ":" + vi.GetString("Password") +
		"@cakemarketing.atlassian.net/rest/api/3/issue/" + story)
	if err != nil {
		c.Status(fiber.StatusBadRequest).JSON(err.Error())
		return err
	}

	// decode data into struct
	var d AutoGenerated
	if err := json.NewDecoder(resp.Body).Decode(&d); err != nil {
		c.Status(fiber.StatusBadRequest).JSON(err.Error())
		return err
	}

	output := fmt.Sprintf("Story number: %s\nIssue Type: %s\nAssignee: %s\nStatus: %s\nDescription: %s\nStory Points: %.2f\nCreator: %s", d.Key, d.Fields.Issuetype.Name, d.Fields.Assignee, d.Fields.Status.Name, d.Fields.Summary, d.Fields.Customfield_10105, d.Fields.Creator.DisplayName)

	fileName := story + ".txt"

	// adding data into file
	f, err := os.Create(fileName)
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	ioutil.WriteFile(fileName, []byte(output), 0644)

	return c.Status(fiber.StatusOK).JSON(d)
}

func main() {
	fmt.Println("JIRA Rest Api")

	// fiber initialization
	app := fiber.New()
	app.Use(logger.New())
	app.Get("/", func(c *fiber.Ctx) error {
		return c.SendString("Welcome to JIRA Rest API")
	})

	app.Get("/story/:storyNum", getStoryData)

	log.Fatal(app.Listen(":8082"))
}
